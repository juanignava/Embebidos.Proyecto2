
hello_world.elf:     file format elf32-littlenios2
hello_world.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x0000020c memsz 0x0000020c flags r-x
    LOAD off    0x0000122c vaddr 0x0000122c paddr 0x00001230 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001234 vaddr 0x00001234 paddr 0x00001234 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001230  2**0
                  CONTENTS
  2 .text         000001f4  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00001214  00001214  00001214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0000122c  00001230  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00001234  00001234  00001234  2**2
                  ALLOC, SMALL_DATA
  6 .RAM          00000000  00001240  00001240  00001230  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  00001260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00000b7b  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000076e  00000000  00000000  00001f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00000993  00000000  00000000  000026d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000001ac  00000000  00000000  00003064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000005e0  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000265  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  00003a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  00003a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00004837  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000483a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000483d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000483e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000483f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00004843  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00004847  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0000484b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001f  00000000  00000000  00004852  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001214 l    d  .rodata	00000000 .rodata
0000122c l    d  .rwdata	00000000 .rwdata
00001234 l    d  .bss	00000000 .bss
00001240 l    d  .RAM	00000000 .RAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/quartus_embebidos/cpu_basico/software/hello_world_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00001108 g     F .text	0000002c alt_main
00001230 g       *ABS*	00000000 __flash_rwdata_start
0000122c g     O .rwdata	00000004 UART
00001134 g     F .text	00000038 alt_putstr
000011c8 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001238 g     O .bss	00000004 alt_argv
0000922c g       *ABS*	00000000 _gp
000011d0 g     F .text	00000028 memcpy
00001240 g       *ABS*	00000000 __bss_end
000011c0 g     F .text	00000004 alt_dcache_flush_all
00001230 g       *ABS*	00000000 __ram_rwdata_end
0000122c g       *ABS*	00000000 __ram_rodata_end
00001240 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001190 g     F .text	00000030 altera_avalon_jtag_uart_write
00001020 g     F .text	0000003c _start
0000118c g     F .text	00000004 alt_sys_init
0000122c g       *ABS*	00000000 __ram_rwdata_start
00001214 g       *ABS*	00000000 __ram_rodata_start
00001240 g       *ABS*	00000000 __alt_stack_base
00001234 g       *ABS*	00000000 __bss_start
0000105c g     F .text	00000028 main
00001000 g       *ABS*	00000000 __alt_mem_RAM
00001234 g     O .bss	00000004 alt_envp
00001214 g       *ABS*	00000000 __flash_rodata_start
0000116c g     F .text	00000020 alt_irq_init
0000123c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001230 g       *ABS*	00000000 _edata
00001240 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000011f8 g     F .text	0000001c strlen
000011c4 g     F .text	00000004 alt_icache_flush_all
00001084 g     F .text	00000084 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a48b14 	ori	gp,gp,37420
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10848d14 	ori	r2,r2,4660

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c49014 	ori	r3,r3,4672

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00010840 	call	1084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	00011080 	call	1108 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <alt_after_alt_main>

0000105c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
    105c:	01000034 	movhi	r4,0
{ 
    1060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
    1064:	21048504 	addi	r4,r4,4628
{ 
    1068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
    106c:	00011340 	call	1134 <alt_putstr>

  volatile unsigned char* reg_ptr = (unsigned char*) 0x4000;

  *reg_ptr = 0;
    1070:	00100005 	stb	zero,16384(zero)

  /* Event loop never exits. */
  while (1){
	  *reg_ptr = *reg_ptr + 1;
    1074:	00900003 	ldbu	r2,16384(zero)
    1078:	10800044 	addi	r2,r2,1
    107c:	00900005 	stb	r2,16384(zero)
  while (1){
    1080:	003ffc06 	br	1074 <main+0x18>

00001084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1084:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1088:	01000034 	movhi	r4,0
    108c:	01400034 	movhi	r5,0
    1090:	dfc00015 	stw	ra,0(sp)
    1094:	21048b04 	addi	r4,r4,4652
    1098:	29448c04 	addi	r5,r5,4656
    109c:	21400426 	beq	r4,r5,10b0 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
    10a0:	01800034 	movhi	r6,0
    10a4:	31848c04 	addi	r6,r6,4656
    10a8:	310dc83a 	sub	r6,r6,r4
    10ac:	00011d00 	call	11d0 <memcpy>
  if (to != from)
    10b0:	01000034 	movhi	r4,0
    10b4:	01400034 	movhi	r5,0
    10b8:	21040804 	addi	r4,r4,4128
    10bc:	29440804 	addi	r5,r5,4128
    10c0:	21400426 	beq	r4,r5,10d4 <alt_load+0x50>
      *to++ = *from++;
    10c4:	01800034 	movhi	r6,0
    10c8:	31840804 	addi	r6,r6,4128
    10cc:	310dc83a 	sub	r6,r6,r4
    10d0:	00011d00 	call	11d0 <memcpy>
  if (to != from)
    10d4:	01000034 	movhi	r4,0
    10d8:	01400034 	movhi	r5,0
    10dc:	21048504 	addi	r4,r4,4628
    10e0:	29448504 	addi	r5,r5,4628
    10e4:	21400426 	beq	r4,r5,10f8 <alt_load+0x74>
      *to++ = *from++;
    10e8:	01800034 	movhi	r6,0
    10ec:	31848b04 	addi	r6,r6,4652
    10f0:	310dc83a 	sub	r6,r6,r4
    10f4:	00011d00 	call	11d0 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    10f8:	00011c00 	call	11c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    10fc:	dfc00017 	ldw	ra,0(sp)
    1100:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
    1104:	00011c41 	jmpi	11c4 <alt_icache_flush_all>

00001108 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1108:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    110c:	0009883a 	mov	r4,zero
{
    1110:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
    1114:	000116c0 	call	116c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1118:	000118c0 	call	118c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    111c:	d1a00217 	ldw	r6,-32760(gp)
    1120:	d1600317 	ldw	r5,-32756(gp)
    1124:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1128:	dfc00017 	ldw	ra,0(sp)
    112c:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
    1130:	000105c1 	jmpi	105c <main>

00001134 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    1134:	defffe04 	addi	sp,sp,-8
    1138:	dc000015 	stw	r16,0(sp)
    113c:	dfc00115 	stw	ra,4(sp)
    1140:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1144:	00011f80 	call	11f8 <strlen>
    1148:	01000034 	movhi	r4,0
    114c:	000f883a 	mov	r7,zero
    1150:	100d883a 	mov	r6,r2
    1154:	800b883a 	mov	r5,r16
    1158:	21048b04 	addi	r4,r4,4652
#else
    return fputs(str, stdout);
#endif
#endif
}
    115c:	dfc00117 	ldw	ra,4(sp)
    1160:	dc000017 	ldw	r16,0(sp)
    1164:	dec00204 	addi	sp,sp,8
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    1168:	00011901 	jmpi	1190 <altera_avalon_jtag_uart_write>

0000116c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    116c:	deffff04 	addi	sp,sp,-4
    1170:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
    1174:	00011c80 	call	11c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1178:	00800044 	movi	r2,1
    117c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1180:	dfc00017 	ldw	ra,0(sp)
    1184:	dec00104 	addi	sp,sp,4
    1188:	f800283a 	ret

0000118c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( UART, UART);
}
    118c:	f800283a 	ret

00001190 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1190:	21000017 	ldw	r4,0(r4)
{
    1194:	3005883a 	mov	r2,r6

  const char * end = ptr + count;
    1198:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    119c:	29800136 	bltu	r5,r6,11a4 <altera_avalon_jtag_uart_write+0x14>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    11a0:	f800283a 	ret
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    11a4:	20c00137 	ldwio	r3,4(r4)
    11a8:	18ffffec 	andhi	r3,r3,65535
    11ac:	183ffb26 	beq	r3,zero,119c <altera_avalon_jtag_uart_write+0xc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    11b0:	28c00007 	ldb	r3,0(r5)
    11b4:	29400044 	addi	r5,r5,1
    11b8:	20c00035 	stwio	r3,0(r4)
    11bc:	003ff706 	br	119c <altera_avalon_jtag_uart_write+0xc>

000011c0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    11c0:	f800283a 	ret

000011c4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    11c4:	f800283a 	ret

000011c8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    11c8:	000170fa 	wrctl	ienable,zero
}
    11cc:	f800283a 	ret

000011d0 <memcpy>:
    11d0:	2005883a 	mov	r2,r4
    11d4:	0007883a 	mov	r3,zero
    11d8:	30c0011e 	bne	r6,r3,11e0 <memcpy+0x10>
    11dc:	f800283a 	ret
    11e0:	28cf883a 	add	r7,r5,r3
    11e4:	39c00003 	ldbu	r7,0(r7)
    11e8:	10c9883a 	add	r4,r2,r3
    11ec:	18c00044 	addi	r3,r3,1
    11f0:	21c00005 	stb	r7,0(r4)
    11f4:	003ff806 	br	11d8 <memcpy+0x8>

000011f8 <strlen>:
    11f8:	2005883a 	mov	r2,r4
    11fc:	10c00007 	ldb	r3,0(r2)
    1200:	1800021e 	bne	r3,zero,120c <strlen+0x14>
    1204:	1105c83a 	sub	r2,r2,r4
    1208:	f800283a 	ret
    120c:	10800044 	addi	r2,r2,1
    1210:	003ffa06 	br	11fc <strlen+0x4>
